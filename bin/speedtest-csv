#!/usr/bin/env bash
### Usage:
###  speedtest-csv [options]
###
### Options:
###  --debug           Output extra debug information
###  --header          Display field names (only)
###  --help            This help
###  --last            Use most recent stats, if available
###                    (avoids calling `speedtest-cli`)
###  --quote <str>     Quote fields using <str>
###  --sep <str>       Separate fields using <str>
###  --share           Generate and provide a URL to the speedtest.net
###                    share results image (enabled by default)
###  --no-share        Disable --share
###  --standardize     Standardize units and number formats
###  --no-standardize  Disable --standardize
###  --version         Display version
###
###  --thingspeak      Send data to IoT Sensor Data site, thingspeak.com
###  --ifttt	       Send data to an IFTTT channel for action
###  --slack	       Send data to a Slack channel for notification
###  --google	       Send data directly to a Google Sheet
###
###  --outputCSV       Output data to CSV formated text file (enabled by default)
###  --no-outputCSV    Disable --outputCSV
###
### Any other options are passed to speedtest-cli as is.
###
### Example:
###  speedtest-csv --sep '\t' --standardize
###  speedtest-csv --sep '\t' --header
###
### Copyright: 2014-2016 Henrik Bengtsson
### License: GPL (>= 2.1) [https://www.gnu.org/licenses/gpl.html]

#####
# Set variables if using ThingSpeak, IFTTT, or Slack
TSkey="Your ThingSpeak API Key"
IFTTTkey="Your IFTTT API Key"
IFTTTeventname="ATTBandwidth"
# Add in the username to display in your Slack channel
SlackUsername="ATT-bot"
SlackURL_key="https://hooks.slack.com/services/KEY01/KEY02/KEY03"
# See below for URL with example information
# You need to enter the script ID created once you make your script publicly accessible
GoogleScriptID="Your Google Sheet Script ID"
CSVPath="/home/pi/"
CSVFile="speedtest-output.csv"
#####

call="$0 $*"

# Temporary file holding speedtest-cli output
user=$USER
if test -z $user; then
    user=$USERNAME
fi
log=/tmp/$user/speedtest-csv.log

# Local functions
function mecho() { echo "$@" 1>&2; }
function mdebug() {
    if [[ $debug == TRUE ]]; then
	mecho "[DEBUG] $@";
    fi
}
function str_extract() {
    pattern=$1
    # Extract
    res=`grep "$pattern" $log | sed "s/$pattern//g"`
    # Drop trailing ...
    res=`echo $res | sed 's/[.][.][.]//g'`
    # Trim
    res=`echo $res | sed 's/^ *//g' | sed 's/ *$//g'`
    echo $res
}

debug=FALSE
header=FALSE
standardize=FALSE
share=TRUE
last=FALSE
version=FALSE
help=FALSE
thingspeak=FALSE
ifttt=FALSE
slack=FALSE
google=FALSE
outputCSV=TRUE

# Character for separating values
sep=";"
quote=""
opts=

# Parse command-line options
while [[ $# > 0 ]]; do
    opt=$1
    if test "$opt" == "--header"; then
	header=TRUE
    elif test "$opt" == "--quote"; then
	quote=$2
	shift
    elif test "$opt" == "--sep"; then
	sep=$2
	shift
    elif test "$1" == "--share"; then
        share=TRUE
    elif test "$1" == "--no-share"; then
        share=FALSE
    elif test "$1" == "--standardize"; then
        standardize=TRUE
    elif test "$1" == "--no-standardize"; then
        standardize=FALSE
    elif test "$1" == "--last"; then
        last=TRUE
    elif test "$1" == "--debug"; then
        debug=TRUE
    elif test "$1" == "--version"; then
        version=TRUE
    elif test "$1" == "--thingspeak"; then
        thingspeak=TRUE
    elif test "$1" == "--ifttt"; then
        ifttt=TRUE
    elif test "$1" == "--slack"; then
        slack=TRUE
    elif test "$1" == "--google"; then
        google=TRUE
    elif test "$1" == "--outputCSV"; then
        google=TRUE
    elif test "$1" == "--no-outputCSV"; then
        google=FALSE
    elif test "$1" == "--help"; then
        help=TRUE
    else
	opts="$opts $1"
    fi
    shift
done

if [[ $share == TRUE ]]; then
    opts="$opts --share"
fi

# Trim
opts=`echo $opts | sed 's/^ *//g' | sed 's/ *$//g'`

if [[ -n "$SPEEDTEST_CSV_SKIP" ]]; then
    mdebug "\$SPEEDTEST_CSV_SKIP => --last"
    last=TRUE
fi

if [[ $debug == TRUE ]]; then
    mdebug "call: $call"
    mdebug "header: $header"
    mdebug "standardize: $standardize"
    mdebug "share: $share"
    mdebug "last: $last"
    mdebug "version: $version"
    mdebug "field delimeter: '$sep'"
    mdebug "quotation mark: $quote"
    mdebug "speedtest-cli options: $opts"
fi

if [[ $version == TRUE ]]; then
    echo "1.2.0"
    exit 0
fi 

if [[ $help == TRUE ]]; then
    grep "^###" $0 | grep -v "^####" | cut -b 5-
    exit 0
fi 

# Display header?
if [[ $header == TRUE ]]; then
    mdebug "Generating header"
    start="start"
    stop="stop"
    from="from"
    from_ip="from_ip"
    server="server"
    server_dist="server_dist"
    server_ping="server_ping"
    download="download"
    upload="upload"
    share_url="share_url"
else
    mkdir -p $(dirname $log)
  
    start=$(date +"%Y-%m-%d %H:%M:%S")
  
    if [[ $last == TRUE && -f "$log" ]]; then
        # Reuse existing results (useful for debugging)
        mdebug "Reusing existing results: $log"
    else
        # Query Speedtest
	cmd="speedtest-cli $opts"
        mdebug "Querying Speedtest using '$cmd'"
        $cmd > $log
	status=$?
        mdebug "Exit code: $status"
    fi
    
    stop=$(date +"%Y-%m-%d %H:%M:%S")

    # Was speedtest-cli successful?
    if [[ $status -ne 0 ]]; then
	mecho "ERROR: '$cmd' failed (exit code $status)."
	mecho $(cat /tmp/$user/speedtest-csv.log)
	exit $status
    fi
    
    # Parse
    mdebug "Parsing results"
    from=$(str_extract "Testing from ")
    from_ip=$(echo $from | sed 's/.*(//g' | sed 's/).*//g')
    from=$(echo $from | sed 's/ (.*//g')
    server=$(str_extract "Hosted by ")
    server_ping=$(echo $server | sed 's/.*: //g')
    server=$(echo $server | sed 's/: .*//g')
    server_dist=$(echo $server | sed 's/.*\[//g' | sed 's/\].*//g')
    server=$(echo $server | sed 's/ \[.*//g')
    
    download=$(str_extract "Download: ")
    upload=$(str_extract "Upload: ")
    if [[ $share == TRUE ]]; then
	share_url=$(str_extract "Share results: ")
    else
	share_url=
    fi

    # Standardize units?
    if [[ $standardize == TRUE ]]; then
	## Mbits/s -> Mbit/s
        mdebug "Standardize to Mbit/s"
        download=$(echo $download | sed 's/Mbits/Mbit/')
        upload=$(echo $upload | sed 's/Mbits/Mbit/')

	## commas to periods
        mdebug "Standardize to periods (not commas)"
        download=$(echo $download | sed 's/,/./')
        upload=$(echo $upload | sed 's/,/./')
        server_dist=$(echo $server_dist | sed 's/,/./')
        server_ping=$(echo $server_ping | sed 's/,/./')
    fi
    
    mdebug "start: '$start'"
    mdebug "stop: '$stop'"
    mdebug "from: '$from'"
    mdebug "from_ip: '$from_ip'"
    mdebug "server: '$server'"
    mdebug "server_dist: '$server_dist'"
    mdebug "server_ping: '$server_ping'"
    mdebug "download: '$download'"
    mdebug "upload: '$upload'"
    mdebug "share_url: '$share_url'"
fi

# Update values to just pull out raw numbers
value1=`echo $server_ping | cut -d" " -f1`
value2=`echo $download | cut -d" " -f1`
value3=`echo $upload | cut -d" " -f1`

# Send your speed data to ThingSpeak for easy graphing and visualization
# https://thingspeak.com/
#
if [[ $thingspeak == TRUE ]]; then
	mdebug "sending to ThingSpeak"
	curl --silent --request POST --header "X-THINGSPEAKAPIKEY: $TSkey" --data "field1=$value1&field2=$value2&field3=$value3" "https://api.thingspeak.com/update"
fi

# Leverage an IFTTT channel to publish your data to a Google Sheet or elsewhere
#
if [[ $ifttt == TRUE ]]; then
	mdebug "sending to IFTTT"
	IFTTTjson="{\"value1\":\"${value1}\",\"value2\":\"${value2}\",\"value3\":\"${value3}\"}"
	curl --silent --request POST --header "Content-Type: application/json" --data "${IFTTTjson}" https://maker.ifttt.com/trigger/${IFTTTeventname}/with/key/${IFTTTkey} >/dev/null
fi

# Monitor your stats in realtime on your own Slack channel
# https://api.slack.com/incoming-webhooks
#
if [[ $slack == TRUE ]]; then
	mdebug "sending to Slack"
	Slackjson="{\"text\":\"Ping time = ${server_ping}\nDownload = ${download}\nUpload = ${upload}\", \"username\":\"${SlackUsername}\"}"
	curl --silent --request POST --header "Content-Type: application/json" --data "${Slackjson}" ${SlackURL_key}
fi

# Send your stats directly to a Google Sheet to track and create your own graphs
# Information / guidance (example) on how to set up your Google Sheet and associate Script can be found here:
# http://stackoverflow.com/questions/17860449/insert-new-rows-into-google-spreadsheet-via-curl-php-how
#
if [[ $google == TRUE ]]; then
	mdebug "sending to Google Sheets"
	curl --silent -L "https://script.google.com/macros/s/${GoogleScriptID}/exec?Ping=${value1}&Download=${value2}&Upload=${value3}"
fi

# Output CSV results
# Outputs to local file
#
if [[ $outputCSV == TRUE ]]; then
	mdebug "sending to local CSV output"
	sep="$quote$sep$quote"
	printf "$quote$start$sep$stop$sep$from$sep$from_ip$sep$server$sep$server_dist$sep$server_ping$sep$download$sep$upload$sep$share_url$quote\n" >> $CSVPath$CSVFile
fi
